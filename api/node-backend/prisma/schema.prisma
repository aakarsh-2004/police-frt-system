generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  age              Int
  dateOfBirth      DateTime
  gender           String
  email            String?
  phone            String?
  address          String
  personImageUrl   String?
  type             String             @default("suspect")
  nationalId       String?
  nationality      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  suspect          Suspect?
  missingPerson    MissingPerson?
  recognizedPerson RecognizedPerson[]
}

model CrimeRecord {
  id                     String    @id @default(uuid())
  personName             String
  suspects               Suspect?
  crimeType              String
  crimeDescription       String
  crimeDate              DateTime
  convictionDate         DateTime?
  status                 String
  crimeLocation          String
  investigationOfficerId String
  user                   User      @relation(fields: [investigationOfficerId], references: [id])
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Suspect {
  id             String       @id @default(uuid())
  personId       String       @unique
  criminalId     String?      @unique
  person         Person       @relation(fields: [personId], references: [id])
  criminalRecord CrimeRecord? @relation(fields: [criminalId], references: [id])
  riskLevel      String
  foundStatus    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model MissingPerson {
  id               String   @id @default(uuid())
  personId         String   @unique
  person           Person   @relation(fields: [personId], references: [id])
  lastSeenDate     DateTime
  lastSeenLocation String
  missingSince     DateTime
  foundStatus      Boolean  @default(false)
  reportBy         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model RecognizedPerson {
  id               String   @id @default(uuid())
  person           Person   @relation(fields: [personId], references: [id])
  personId         String
  camera           Camera   @relation(fields: [cameraId], references: [id])
  cameraId         String
  capturedDateTime DateTime @default(now())
  capturedImageUrl String
  confidenceScore  String
  videoUrl         String?
}

model User {
  id               String        @id @default(uuid())
  firstName        String
  lastName         String
  username         String        @unique
  email            String        @unique
  password         String
  role             String        @default("non-admin")
  designation      String
  userImageUrl     String?
  policeId         String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  requests         Requests[]
  approvedRequests Requests[]    @relation("ApprovedRequests")
  crimeRecords     CrimeRecord[]
  phone            String?       @unique
  phoneVerified    Boolean       @default(false)
  otpSecret        String?
  otpExpiry        DateTime?
}

model Camera {
  id                   String             @id @default(uuid())
  name                 String
  location             String
  latitude             String
  longitude            String
  nearestPoliceStation String?
  status               String             @default("active")
  streamUrl            String
  recognizedPersons    RecognizedPerson[]
}

model Requests {
  id           String   @id @default(uuid())
  requestedBy  String
  user         User     @relation(fields: [requestedBy], references: [id])
  approvedBy   String?
  approvedUser User?    @relation("ApprovedRequests", fields: [approvedBy], references: [id])
  status       String   @default("pending")
  personData   String?
  imageData    String?
  createdAt    DateTime @default(now())
  approvedAt   DateTime @updatedAt
}

model Notification {
    id          String    @id @default(uuid())
    message     String
    type        String    
    read        Boolean   @default(false)
    createdAt   DateTime  @default(now())
    readBy      String[]  
}
